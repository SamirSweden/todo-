import asyncio
import socket
import ipaddress
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandStart
from concurrent.futures import ThreadPoolExecutor

token = "ur token"
bot = Bot(token=token)
dp = Dispatcher()

executor = ThreadPoolExecutor(max_workers=10)
COMMON_PORTS = [21, 22, 23, 25, 53, 80, 110, 443, 993, 995, 8080, 8443]

async def check_port(host: str, port: int, timeout: float = 1.0) -> bool: 
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞"""
    try: 
        loop = asyncio.get_event_loop()
        res = await loop.run_in_executor(
            executor, 
            lambda: check_port_sync(host, port, timeout)
        )
        return res
    except Exception:
        return False

def check_port_sync(host: str, port: int, timeout: float) -> bool:  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: port: int
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
            sock.settimeout(timeout)
            result = sock.connect_ex((host, port))
            return result == 0
    except Exception:
        return False

async def scan_ports(host: str, ports: list) -> list:
    open_ports = [] 

    tasks = [check_port(host, port) for port in ports]
    results = await asyncio.gather(*tasks)

    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —É–±—Ä–∞–ª –ª–∏—à–Ω–∏–π 'in ports'
    for port, is_open in zip(ports, results):
        if is_open:
            open_ports.append(port)
        
    return open_ports

@dp.message(CommandStart())
async def start_command(message: types.Message):
    await message.answer(
        "üîç Nmap bot \n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/scan <ip/host> - –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å common –ø–æ—Ä—Ç—ã\n"
        "/scan <ip/host> <port> - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ—Ä—Ç\n"
        "/scan <ip/host> <start_port>-<end_port> - –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "/scan 192.168.1.1\n"
        "/scan google.com 80\n"
        "/scan 192.168.1.1 20-100"
    )

@dp.message(Command("scan"))
async def scan_command(message: types.Message):
    try:
        args = message.text.split()

        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ len()
        if len(args) < 2: 
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /scan <host> [port/range]")  # –î–æ–±–∞–≤–ª–µ–Ω–æ await
            return
        
        host = args[1]

        try: 
            ipaddress.ip_address(host)
        except ValueError:
            try:
                socket.gethostbyname(host)
            except socket.gaierror:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ö–æ—Å—Ç –∏–ª–∏ –¥–æ–º–µ–Ω")
                return
        
        status_msg = await message.answer(f"üîç –°–∫–∞–Ω–∏—Ä—É—é {host}...")

        if len(args) == 2:
            ports_to_scan = COMMON_PORTS
            scan_type = "common –ø–æ—Ä—Ç—ã"
        elif len(args) == 3:
            port_arg = args[2]
            
            if '-' in port_arg:
                try:
                    start_port, end_port = map(int, port_arg.split('-'))
                    if start_port < 1 or end_port > 65535 or start_port > end_port:
                        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ—Ä—Ç–æ–≤ (1-65535)")
                        return
                    ports_to_scan = list(range(start_port, end_port + 1))
                    scan_type = f"–ø–æ—Ä—Ç—ã {start_port}-{end_port}"
                except ValueError:
                    await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
                    return
            else:
                try:
                    port = int(port_arg)
                    if port < 1 or port > 65535:
                        await message.answer("‚ùå –ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 1-65535")
                        return
                    ports_to_scan = [port]
                    scan_type = f"–ø–æ—Ä—Ç {port}"
                except ValueError:
                    await message.answer("‚ùå –ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                    return
        else:
            await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
            return
        
        open_ports = await scan_ports(host, ports_to_scan)
        
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã
        if open_ports:
            result = f"‚úÖ –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã –Ω–∞ {host} ({scan_type}):\n"
            for port in sorted(open_ports):
                # –£–±–µ–¥–∏–º—Å—è —á—Ç–æ port —ç—Ç–æ —á–∏—Å–ª–æ
                port_num = port
                if not isinstance(port, int):
                    try:
                        port_num = int(port)
                    except:
                        port_num = port
                # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤
                service = get_service_name(port_num)
                result += f"üü¢ –ü–æ—Ä—Ç {port} - {service}\n"
        else:
            result = f"‚ùå –ù–∞ {host} –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤ ({scan_type})"
        
        await status_msg.edit_text(result)  # –î–æ–±–∞–≤–ª–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

def get_service_name(port: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –ø–æ—Ä—Ç–∞"""
    if not isinstance(port, int):
        try:
            port = int(port)
        except (ValueError, TypeError):
            return "Unknown"
    
    services = {
        21: "FTP", 22: "SSH", 23: "Telnet", 25: "SMTP", 53: "DNS",
        80: "HTTP", 110: "POP3", 443: "HTTPS", 993: "IMAPS", 995: "POP3S",
        8080: "HTTP-Alt", 8443: "HTTPS-Alt", 3306: "MySQL", 5432: "PostgreSQL", 27017: "MongoDB"
    }
    return services.get(port, "Unknown")

@dp.message(Command("ports"))
async def show_common_ports(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å common –ø–æ—Ä—Ç—ã"""
    ports_info = "üìã Common –ø–æ—Ä—Ç—ã –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n"
    for port in COMMON_PORTS:
        service = get_service_name(port)
        ports_info += f"‚Ä¢ {port} - {service}\n"
    
    await message.answer(ports_info)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
